/**
 * @fileoverview Firestore Security Rules for the invoice tracking application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict path-based ownership model.  Each data entity (Customer, Invoice, Outstanding, AgePeriod) is nested under a /customers/{customerId} path,
 * ensuring that all data is scoped to a specific customer.  Only authenticated users can create, read, update, or delete data, and they can only perform these operations
 * on data nested under a customer ID that they own (i.e., their auth UID matches the customerId path segment).
 *
 * Data Structure:
 * The Firestore database has a hierarchical structure:
 * /customers/{customerId}
 *  |-- /invoices/{invoiceId}
 *  |   |-- /outstandings/{outstandingId}
 *  |-- /agePeriods/{agePeriodId}
 *
 * Key Security Decisions:
 * - All data is private and requires authentication.
 * - Data access is controlled by path-based ownership.
 * - Rules do not validate data types or schema except where required for relational integrity.
 * - List operations are allowed for owners of the customer path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to customer documents. Only authenticated users can manage customer data, and they can only manage their own customer data.
     * @path /customers/{customerId}
     * @allow (create) User with UID 'user_abc' can create a customer document with ID 'user_abc'.
     * @allow (get) User with UID 'user_abc' can get the customer document with ID 'user_abc'.
     * @allow (update) User with UID 'user_abc' can update the customer document with ID 'user_abc'.
     * @allow (delete) User with UID 'user_abc' can delete the customer document with ID 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a customer document with ID 'user_abc'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /customers/{customerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(customerId);
      allow list: if isSignedIn() && isOwner(customerId);
      allow create: if isSignedIn() && isOwner(customerId);
      allow update: if isExistingOwner(customerId);
      allow delete: if isExistingOwner(customerId);
    }

    /**
     * @description Manages access to invoice documents within a specific customer's invoices collection. Only the owner of the customer document can manage invoices.
     * @path /customers/{customerId}/invoices/{invoiceId}
     * @allow (create) User with UID 'user_abc' can create an invoice document with ID 'invoice_123' under customer 'user_abc'.
     * @allow (get) User with UID 'user_abc' can get the invoice document with ID 'invoice_123' under customer 'user_abc'.
     * @allow (update) User with UID 'user_abc' can update the invoice document with ID 'invoice_123' under customer 'user_abc'.
     * @allow (delete) User with UID 'user_abc' can delete the invoice document with ID 'invoice_123' under customer 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create an invoice document under customer 'user_abc'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /customers/{customerId}/invoices/{invoiceId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }
      allow get: if isSignedIn() && isOwner(customerId);
      allow list: if isSignedIn() && isOwner(customerId);
      allow create: if isSignedIn() && isOwner(customerId);
      allow update: if isExistingOwner(customerId);
      allow delete: if isExistingOwner(customerId);
    }

    /**
     * @description Manages access to outstanding documents within a specific invoice's outstandings collection. Only the owner of the customer document can manage outstanding amounts.
     * @path /customers/{customerId}/invoices/{invoiceId}/outstandings/{outstandingId}
     * @allow (create) User with UID 'user_abc' can create an outstanding document with ID 'outstanding_456' under invoice 'invoice_123' and customer 'user_abc'.
     * @allow (get) User with UID 'user_abc' can get the outstanding document with ID 'outstanding_456' under invoice 'invoice_123' and customer 'user_abc'.
     * @allow (update) User with UID 'user_abc' can update the outstanding document with ID 'outstanding_456' under invoice 'invoice_123' and customer 'user_abc'.
     * @allow (delete) User with UID 'user_abc' can delete the outstanding document with ID 'outstanding_456' under invoice 'invoice_123' and customer 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create an outstanding document under invoice 'invoice_123' and customer 'user_abc'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /customers/{customerId}/invoices/{invoiceId}/outstandings/{outstandingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }
      allow get: if isSignedIn() && isOwner(customerId);
      allow list: if isSignedIn() && isOwner(customerId);
      allow create: if isSignedIn() && isOwner(customerId);
      allow update: if isExistingOwner(customerId);
      allow delete: if isExistingOwner(customerId);
    }

        /**
     * @description Manages access to age period documents within a specific customer's agePeriods collection. Only the owner of the customer document can manage age periods.
     * @path /customers/{customerId}/agePeriods/{agePeriodId}
     * @allow (create) User with UID 'user_abc' can create an agePeriod document with ID 'agePeriod_456' under customer 'user_abc'.
     * @allow (get) User with UID 'user_abc' can get the agePeriod document with ID 'agePeriod_456' under customer 'user_abc'.
     * @allow (update) User with UID 'user_abc' can update the agePeriod document with ID 'agePeriod_456' under customer 'user_abc'.
     * @allow (delete) User with UID 'user_abc' can delete the agePeriod document with ID 'agePeriod_456' under customer 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create an agePeriod document under customer 'user_abc'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /customers/{customerId}/agePeriods/{agePeriodId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }
      allow get: if isSignedIn() && isOwner(customerId);
      allow list: if isSignedIn() && isOwner(customerId);
      allow create: if isSignedIn() && isOwner(customerId);
      allow update: if isExistingOwner(customerId);
      allow delete: if isExistingOwner(customerId);
    }
  }
}