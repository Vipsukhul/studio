{
  "entities": {
    "Customer": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Customer",
      "type": "object",
      "description": "Represents a customer with outstanding invoices.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the customer."
        },
        "customerCode": {
          "type": "string",
          "description": "The unique code assigned to the customer."
        },
        "customerName": {
          "type": "string",
          "description": "The name of the customer."
        },
        "region": {
          "type": "string",
          "description": "The geographical region of the customer."
        },
        "invoiceIds": {
          "type": "array",
          "description": "References to Invoices. (Relationship: Customer 1:N Invoice)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "customerCode",
        "customerName",
        "region",
        "invoiceIds"
      ]
    },
    "Invoice": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Invoice",
      "type": "object",
      "description": "Represents an invoice for a customer.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the invoice."
        },
        "customerId": {
          "type": "string",
          "description": "Reference to Customer. (Relationship: Customer 1:N Invoice)"
        },
        "invoiceNumber": {
          "type": "string",
          "description": "The unique number of the invoice."
        },
        "invoiceAmount": {
          "type": "number",
          "description": "The total amount of the invoice."
        },
        "invoiceDate": {
          "type": "string",
          "description": "The date the invoice was issued.",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "The current status of the invoice (e.g., paid, unpaid, dispute)."
        },
        "agePeriod": {
          "type": "string",
          "description": "The age period of the outstanding amount (e.g., 0-30 days, 30-90 days)."
        },
        "outstandingIds": {
          "type": "array",
          "description": "References to Outstandings. (Relationship: Invoice 1:N Outstanding)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "customerId",
        "invoiceNumber",
        "invoiceAmount",
        "invoiceDate",
        "status",
        "agePeriod",
        "outstandingIds"
      ]
    },
    "Outstanding": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Outstanding",
      "type": "object",
      "description": "Represents an outstanding amount for a specific month.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the outstanding entry."
        },
        "invoiceId": {
          "type": "string",
          "description": "Reference to Invoice. (Relationship: Invoice 1:N Outstanding)"
        },
        "month": {
          "type": "string",
          "description": "The month for which the outstanding amount is calculated (e.g., Apr-25)."
        },
        "amount": {
          "type": "number",
          "description": "The outstanding amount for the specified month."
        }
      },
      "required": [
        "id",
        "invoiceId",
        "month",
        "amount"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "customers/{customerId}",
        "definition": {
          "entityName": "Customer",
          "schema": {
            "$ref": "#/backend/entities/Customer"
          },
          "description": "Stores customer data. Includes denormalized 'customerId' for authorization independence.",
          "params": [
            {
              "name": "customerId",
              "description": "The unique identifier of the customer."
            }
          ]
        }
      },
      {
        "path": "customers/{customerId}/invoices/{invoiceId}",
        "definition": {
          "entityName": "Invoice",
          "schema": {
            "$ref": "#/backend/entities/Invoice"
          },
          "description": "Stores invoice data for a specific customer. Includes denormalized 'customerId' and 'invoiceId' for authorization independence.",
          "params": [
            {
              "name": "customerId",
              "description": "The unique identifier of the customer."
            },
            {
              "name": "invoiceId",
              "description": "The unique identifier of the invoice."
            }
          ]
        }
      },
      {
        "path": "customers/{customerId}/invoices/{invoiceId}/outstandings/{outstandingId}",
        "definition": {
          "entityName": "Outstanding",
          "schema": {
            "$ref": "#/backend/entities/Outstanding"
          },
          "description": "Stores outstanding amount data for a specific invoice. Includes denormalized 'customerId', 'invoiceId', and 'outstandingId' for authorization independence.",
          "params": [
            {
              "name": "customerId",
              "description": "The unique identifier of the customer."
            },
            {
              "name": "invoiceId",
              "description": "The unique identifier of the invoice."
            },
            {
              "name": "outstandingId",
              "description": "The unique identifier of the outstanding amount."
            }
          ]
        }
      }
    ],
    "reasoning": "This Firestore structure is designed to manage customer, invoice, and outstanding data for the Outstanding Tracker application. It prioritizes authorization independence and efficient querying. Customers are stored at the root level in a `customers` collection. Invoices are stored as subcollections of customer documents (`customers/{customerId}/invoices/{invoiceId}`), and outstanding amounts are further nested under invoice documents (`customers/{customerId}/invoices/{invoiceId}/outstandings/{outstandingId}`).\n\n**Authorization Independence**: The structure does not require `get()` calls in security rules. The application uses path-based ownership for security. Only the user with the appropriate permissions can access customer, invoice and outstanding documents.\n\n**QAPs Support**: The structure supports secure `list` operations. Security rules can easily check if the requesting user has access to a specific customer document or its subcollections (invoices and outstanding). The homogeneous security posture within each collection simplifies the rules, ensuring only authorized users can list resources.\n\nGiven the nature of data and the lack of user-specific ownership, there is no need for denormalization of members, roles, or other authorization context."
  }
}