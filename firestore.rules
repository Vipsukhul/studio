/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a strict user-ownership model for user profiles and a role-based access control model for other collections. It prioritizes secure write access with flexible read access where appropriate.
 * @data_structure
 *  - /customers/{customerId}: Stores customer data.
 *  - /customers/{customerId}/invoices/{invoiceId}: Stores invoice data for a specific customer, nested under the customer.
 *  - /users/{userId}: Stores user profile information.
 *  - /notifications/{notificationId}: Stores application notifications.
 * @key_security_decisions
 *  - Users can only read and write their own profile data.
 *  - Customer and invoice data have no specific ownership defined and are therefore locked down for write access.
 *  - Notifications are also locked down for write access, requiring a role-based system for sending notifications.
 *  - Listing of users is forbidden to prevent data leakage.
 * @denormalization_for_authorization
 *  - No denormalization is explicitly used in this ruleset, but it's important to consider for future enhancements. For example, adding a `customerId` field to the `Invoice` document would allow for simpler security rules on the invoice collection.
 * @structural_segregation The data model does not segregate public from private data. If public customer data is needed, consider a separate `public_customers` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user profile data.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with matching UID can create their profile.
     * @allow (get, update, delete) - Authenticated user with matching UID can read, update, and delete their profile.
     * @deny (create) - Authenticated user attempts to create a profile with a different UID.
     * @deny (update, delete) - Authenticated user attempts to update or delete a profile with a different UID.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing of all users
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to customer data. No user can create, update, or delete customer information. Read access is allowed.
     * @path /customers/{customerId}
     * @allow (get, list) - Any authenticated user can read customer data.
     * @deny (create, update, delete) - No user can create, update, or delete customer data without specific role.
     * @principle Restricts write access to customer data.
     */
    match /customers/{customerId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Restricts access to invoice data. No user can create, update, or delete invoice information. Read access is allowed.
     * @path /customers/{customerId}/invoices/{invoiceId}
     * @allow (get, list) - Any authenticated user can read invoice data.
     * @deny (create, update, delete) - No user can create, update, or delete invoice data without specific role.
     * @principle Restricts write access to invoice data.
     */
    match /customers/{customerId}/invoices/{invoiceId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

     /**
      * @description Restricts access to notifications data. No user can create, update, or delete notifications. Read access is allowed.
      * @path /notifications/{notificationId}
      * @allow (get, list) - Any authenticated user can read notifications.
      * @deny (create, update, delete) - No user can create, update, or delete notifications.
      * @principle Restricts write access to notifications data.
      */
    match /notifications/{notificationId} {
        allow get, list: if isSignedIn();
        allow create, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}