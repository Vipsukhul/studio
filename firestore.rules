/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model, primarily using the "Engineer" role.
 * All data is organized into three top level collections: customers, users, and invoices.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Customer and Invoice data access is restricted to authorized Engineers and those with elevated roles.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId.
     * @param {string} userId - The user ID to compare against.
     * @return {boolean} True if the user is the owner.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user has the Engineer role.
     * @return {boolean} True if the user has the Engineer role.
     */
    function isEngineer() {
        return isSignedIn() && (request.auth.token.role == 'Engineer' || request.auth.token.role == 'Manager' || request.auth.token.role == 'Country Manager' || request.auth.token.role == 'Admin');
    }

    /**
     * @description Checks if the authenticated user has the Manager role.
     * @return {boolean} True if the user has the Manager role.
     */
    function isManager() {
        return isSignedIn() && (request.auth.token.role == 'Manager' || request.auth.token.role == 'Country Manager' || request.auth.token.role == 'Admin');
    }

    /**
     * @description Checks if the authenticated user has the Country Manager role.
     * @return {boolean} True if the user has the Country Manager role.
     */
    function isCountryManager() {
        return isSignedIn() && (request.auth.token.role == 'Country Manager' || request.auth.token.role == 'Admin');
    }

    /**
     * @description Checks if the authenticated user has the Admin role.
     * @return {boolean} True if the user has the Admin role.
     */
    function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'Admin';
    }

    /**
     * @description Checks if the user is the existing owner of a resource.
     * @param {string} userId - The user ID to compare against.
     * @return {boolean} True if the user is the owner and the resource exists.
     */
    function isExistingOwner(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.userId == request.auth.uid;
    }

    /**
     * @description Rules for the /customers/{customerId} collection.
     * @path /customers/{customerId}
     * @allow (read) Authenticated Engineer can read a customer document.
     * @allow (create) Authenticated Engineer can create a customer document.
     * @deny (delete) Non-Admin user cannot delete a customer document.
     * @principle Role-based access control.
     */
    match /customers/{customerId} {
      allow get, list: if isEngineer();
      allow create: if isEngineer();
      allow update: if isEngineer();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /customers/{customerId}/invoices/{invoiceId} subcollection.
     * @path /customers/{customerId}/invoices/{invoiceId}
     * @allow (read) Authenticated Engineer can read an invoice document.
     * @allow (create) Authenticated Engineer can create an invoice document.
     * @deny (delete) Non-Admin user cannot delete an invoice document.
     * @principle Role-based access control, data hierarchy.
     */
    match /customers/{customerId}/invoices/{invoiceId} {
      allow get, list: if isEngineer();
      allow create: if isEngineer();
      allow update: if isEngineer();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (get) Owner can get their own profile.
     * @allow (create) Owner can create their own profile (self-registration).
     * @deny (update) Non-owner user cannot update another user's profile.
     * @principle User-owned data, self-creation.
     */
    match /users/{userId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId) && request.auth.uid == userId;
        allow update: if isOwner(userId);
        allow delete: if isAdmin();
    }
  }
}