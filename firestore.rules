rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects the root `/customers` collection.
     * @path /customers/{customerId}
     * @allow (create) Authenticated user can create a customer document if the customerId matches their auth UID.
     * @deny (get) Not allowed.
     * @deny (list) Not allowed.
     * @deny (update) Not allowed.
     * @deny (delete) Not allowed.
     * @principle Enforces document ownership for writes. Restricts listing and get to authenticated owner.
     */
    match /customers/{customerId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the customer document
      function isOwner(customerId) {
        return isSignedIn() && request.auth.uid == customerId;
      }

      // Helper function to check if the user is the owner of an EXISTING customer document
      function isExistingOwner(customerId) {
        return isOwner(customerId) && existsAfter(/databases/$(database)/documents/customers/$(customerId));
      }

      // Only allow a user to create their own customer document, the document id must match the auth.uid
      allow create: if isOwner(customerId);

      // No one can read the document
      allow get: if false;

      // No one can list the documents in the customers collection
      allow list: if false;

      // Only the owner can update the document
      allow update: if isExistingOwner(customerId);

      // Only the owner can delete the document
      allow delete: if isExistingOwner(customerId);

    }

    /**
     * @description Protects the `/customers/{customerId}/invoices` subcollection.
     * @path /customers/{customerId}/invoices/{invoiceId}
     * @allow (create) Authenticated user can create an invoice if they own the parent customer document, and the customerId matches.
     * @allow (list) Authenticated user can list invoices if they own the parent customer document.
     * @deny (get) Not allowed.
     * @deny (update) Not allowed.
     * @deny (delete) Not allowed.
     * @principle Enforces document ownership for writes. Restricts listing and get to authenticated owner.
     */
    match /customers/{customerId}/invoices/{invoiceId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the customer document
      function isOwner(customerId) {
        return isSignedIn() && request.auth.uid == customerId;
      }

       // Helper function to check if the user is the owner of an EXISTING customer document
      function isExistingOwner(customerId) {
        return isOwner(customerId) && existsAfter(/databases/$(database)/documents/customers/$(customerId)/invoices/$(invoiceId));
      }

      // Only allow the owner to create an invoice if the customerId matches
      allow create: if isOwner(customerId);

      // No one can read the document
      allow get: if false;

      // Only allow the owner to list invoices
      allow list: if isOwner(customerId);

      // Only the owner can update the document
      allow update: if isExistingOwner(customerId);

      // Only the owner can delete the document
      allow delete: if isExistingOwner(customerId);
    }

    /**
     * @description Protects the `/customers/{customerId}/invoices/{invoiceId}/outstandings` subcollection.
     * @path /customers/{customerId}/invoices/{invoiceId}/outstandings/{outstandingId}
     * @allow (create) Authenticated user can create an outstanding if they own the parent customer and invoice documents, and the customerId matches.
     * @allow (list) Authenticated user can list outstandings if they own the parent customer and invoice documents.
     * @deny (get) Not allowed.
     * @deny (update) Not allowed.
     * @deny (delete) Not allowed.
     * @principle Enforces document ownership for writes. Restricts listing and get to authenticated owner.
     */
    match /customers/{customerId}/invoices/{invoiceId}/outstandings/{outstandingId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the customer document
      function isOwner(customerId) {
        return isSignedIn() && request.auth.uid == customerId;
      }

      // Helper function to check if the user is the owner of an EXISTING customer document
      function isExistingOwner(customerId) {
        return isOwner(customerId) && existsAfter(/databases/$(database)/documents/customers/$(customerId)/invoices/$(invoiceId)/outstandings/$(outstandingId));
      }

      // Only allow the owner to create an outstanding if the customerId matches
      allow create: if isOwner(customerId);

      // No one can read the document
      allow get: if false;

      // Only allow the owner to list outstandings
      allow list: if isOwner(customerId);

      // Only the owner can update the document
      allow update: if isExistingOwner(customerId);

      // Only the owner can delete the document
      allow delete: if isExistingOwner(customerId);
    }
  }
}