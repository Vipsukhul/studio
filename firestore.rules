/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and a public-read, owner-write model for customers and their invoices.
 * Notifications are writeable by anyone.
 *
 * Data Structure:
 * - /customers/{customerId}: Stores customer data.  All users can read but only an admin can write
 * - /customers/{customerId}/invoices/{invoiceId}: Stores invoice data for a specific customer. All users can read but only an admin can write
 * - /users/{userId}: Stores user profile information, accessible only to the user themselves.
 * - /notifications/{notificationId}: Stores application notifications, accessible to anyone.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Listing of users is disallowed for privacy.
 * - Customers and invoices are publicly readable, but only admin can create, update, or delete.
 * - Notifications can be created, read, updated and deleted by anyone.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the requesting user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the document.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the document.
     * @param {string} userId - The user ID to compare against the resource data.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
    
    /**
     * @description Checks if the user has the 'Admin' role.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
        return request.auth.token.role == 'Admin';
    }

    /**
     * @description Defines rules for the /customers/{customerId} collection.
     * @path /customers/{customerId}
     * @allow (get, list): Any user can read customer data.
     * @allow (create, update, delete): Only an admin can write customer data.
     * @deny (create, update, delete): Non-admin users cannot write customer data.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /customers/{customerId} {
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Defines rules for the /customers/{customerId}/invoices/{invoiceId} collection.
     * @path /customers/{customerId}/invoices/{invoiceId}
     * @allow (get, list): Any user can read invoice data.
     * @allow (create, update, delete): Only an admin can write invoice data.
     * @deny (create, update, delete): Non-admin users cannot write invoice data.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /customers/{customerId}/invoices/{invoiceId} {
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Defines rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create): Only the user themselves can create their profile.
     * @allow (get, update, delete): Only the user themselves can read, update, or delete their profile.
     * @deny (list): Listing of users is not allowed.
     * @deny (create, update, delete): Other users cannot modify this user's profile.
     * @principle Enforces strict user-ownership for profile data.
     */
    match /users/{userId} {
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

      /**
       * @description Defines rules for the /notifications/{notificationId} collection.
       * @path /notifications/{notificationId}
       * @allow (get, create, update, delete, list): Any signed-in user can perform any operation on notifications.
       * @principle Allows full access to notifications for all users.
       */
    match /notifications/{notificationId} {
      allow get, create, update, delete, list: if isSignedIn();
    }
  }
}