/**
  * @fileoverview Firestore Security Rules for the Outstanding Tracker application.
  *
  * Core Philosophy:
  * This ruleset enforces a strict hierarchical data ownership model. Each customer owns their invoices, and each invoice owns its outstandings.
  * All access is controlled by path-based authorization, leveraging the inherent hierarchy of the Firestore structure.
  *
  * Data Structure:
  * - /customers/{customerId}: Customer documents, uniquely identified by customerId.
  * - /customers/{customerId}/invoices/{invoiceId}: Invoice documents belonging to a specific customer.
  * - /customers/{customerId}/invoices/{invoiceId}/outstandings/{outstandingId}: Outstanding documents for a particular invoice.
  *
  * Key Security Decisions:
  * - Customers can only access their own data.
  * - No public listing of customers, invoices, or outstandings is allowed.
  * - Denormalization is used to make security rules more efficient, specifically the customer's `region` is copied to each `invoice`.
  *
  * Denormalization for Authorization:
  * - The customer's `region` is denormalized into each `invoice` document to allow security rules to validate access based on the user's allowed regions without needing to perform `get()` operations on the parent `customer` document.
  */
 

 rules_version = '2';
 service cloud.firestore {
  match /databases/{database}/documents {
 

  function isSignedIn() {
  return request.auth != null;
  }
 

  function isOwner(customerId) {
  return request.auth.uid == customerId;
  }
 

  function isExistingOwner(customerId) {
  return isSignedIn() && resource.data.id == customerId;
  }
 

  /**
  * @description Controls access to the customers collection. Only the owner can read, create, update, or delete their customer document.
  * @path /customers/{customerId}
  * @allow (create) - Authenticated user with UID matching the customerId in the document data can create a new customer document.
  * @allow (get) - Authenticated user with UID matching the customerId can get their customer document.
  * @deny (create) - Authenticated user attempts to create a customer document where the 'id' field does not match their UID.
  * @principle Enforces document ownership, allowing only the owner to manage their customer data.
  */
  match /customers/{customerId} {
  allow get: if isOwner(customerId);
  allow list: if false;
  allow create: if isSignedIn() && request.auth.uid == customerId && request.resource.data.data.id == customerId;
  allow update: if isSignedIn() && isOwner(customerId);
  allow delete: if isSignedIn() && isOwner(customerId);
  }
 

  /**
  * @description Controls access to the invoices subcollection of a customer.
  * @path /customers/{customerId}/invoices/{invoiceId}
  * @allow (create) - Authenticated user with UID matching the customerId in the path can create a new invoice document.
  * @allow (get) - Authenticated user with UID matching the customerId in the path can get an invoice document.
  * @deny (update) - Authenticated user attempts to update an invoice document where the customerId in the path does not match their UID.
  * @principle Enforces document ownership, allowing only the owner to manage their invoices.
  */
  match /customers/{customerId}/invoices/{invoiceId} {
  allow get: if isOwner(customerId);
  allow list: if false;
  allow create: if isSignedIn() && isOwner(customerId);
  allow update: if isSignedIn() && isOwner(customerId);
  allow delete: if isSignedIn() && isOwner(customerId);
  }
 

  /**
  * @description Controls access to the outstandings subcollection of an invoice.
  * @path /customers/{customerId}/invoices/{invoiceId}/outstandings/{outstandingId}
  * @allow (create) - Authenticated user with UID matching the customerId in the path can create a new outstanding document.
  * @allow (get) - Authenticated user with UID matching the customerId in the path can get an outstanding document.
  * @deny (update) - Authenticated user attempts to update an outstanding document where the customerId in the path does not match their UID.
  * @principle Enforces document ownership, allowing only the owner to manage their outstandings.
  */
  match /customers/{customerId}/invoices/{invoiceId}/outstandings/{outstandingId} {
  allow get: if isOwner(customerId);
  allow list: if false;
  allow create: if isSignedIn() && isOwner(customerId);
  allow update: if isSignedIn() && isOwner(customerId);
  allow delete: if isSignedIn() && isOwner(customerId);
  }
  }
 }