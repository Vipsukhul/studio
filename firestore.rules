/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes strict user-ownership and role-based access control, while relaxing data validation to enable rapid prototyping.
 * It enforces that only authenticated users can access data, and restricts access based on pre-defined roles and ownership.
 *
 * Data Structure:
 * - /customers/{customerId}: Stores customer data.
 * - /customers/{customerId}/invoices/{invoiceId}: Stores invoice data for a specific customer.
 * - /users/{userId}: Stores user profile information.
 *
 * Key Security Decisions:
 * - User listing is disabled for security reasons.
 * - Data validation is minimized to allow for flexible data shapes during prototyping.
 * - All write operations require authentication.
 * - Role based authorization is implemented to give granular access to different users.
 *
 * Denormalization for Authorization:
 * - The `User` entity includes a `role` field to determine authorization levels.
 * - The `Customer` and `Invoice` entities do not require denormalization in this version.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the resource.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
    }

    /**
     * @description Checks if the user has the specified role.
     */
    function hasRole(role) {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    /**
     * @description Checks if the user is a Manager.
     */
    function isManager() {
        return hasRole('Manager');
    }

    /**
     * @description Checks if the user is an Engineer.
     */
    function isEngineer() {
        return hasRole('Engineer');
    }

    /**
     * @description Checks if the user is a Country Manager.
     */
    function isCountryManager() {
        return hasRole('Country Manager');
    }

    /**
     * @description Checks if the user is an Admin.
     */
    function isAdmin() {
        return hasRole('Admin');
    }

    /**
     * @description Access control rules for the /customers/{customerId} collection.
     * @path /customers/{customerId}
     * @allow (create) - An Admin can create a customer.
     * @deny (create) - A user who is not an Admin cannot create a customer.
     * @allow (get) - Any signed-in user can get a customer.
     * @deny (get) - A user who is not signed in cannot get a customer.
     * @principle Role-based access control.
     */
    match /customers/{customerId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Access control rules for the /customers/{customerId}/invoices/{invoiceId} collection.
     * @path /customers/{customerId}/invoices/{invoiceId}
     * @allow (create) - An Admin can create an invoice.
     * @deny (create) - A user who is not an Admin cannot create an invoice.
     * @allow (get) - Any signed-in user can get an invoice.
     * @deny (get) - A user who is not signed in cannot get an invoice.
     * @principle Role-based access control.
     */
    match /customers/{customerId}/invoices/{invoiceId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Access control rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - A user can create their own user document.
     * @deny (create) - A user cannot create a user document for another user.
     * @allow (get) - A user can get their own user document.
     * @deny (get) - A user cannot get another user's document.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}