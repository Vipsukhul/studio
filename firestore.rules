/**
 * @file Firebase Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model, combined with user-ownership for user profiles.
 * Customer and invoice data access is restricted to authenticated users.
 * Only authorized users can create, update, or delete customers and invoices.
 * User profiles are secured using an ownership model, where users can only manage their own profiles.
 *
 * Data Structure:
 * - /customers/{customerId}: Stores customer data.
 * - /customers/{customerId}/invoices/{invoiceId}: Stores invoice data for a specific customer.
 * - /users/{userId}: Stores user profile information.
 * - /notifications/{notificationId}: Stores application notifications.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Strict role based authorization for customer and invoice data.
 *
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants role based read and write access to customer documents.
     * @path /customers/{customerId}
     * @allow (read): Authenticated user can get any customer.
     * @allow (create): Authenticated user can create a customer if they have the "Admin" role.
     * @allow (update): Authenticated user can update a customer if they have the "Admin" role.
     * @allow (delete): Authenticated user can delete a customer if they have the "Admin" role.
     * @deny (create): Authenticated user without the "Admin" role cannot create a customer.
     * @deny (update): Authenticated user without the "Admin" role cannot update a customer.
     * @deny (delete): Authenticated user without the "Admin" role cannot delete a customer.
     * @principle Role-based access control for customer management.
     */
    match /customers/{customerId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && hasRole(["Admin"]);
      allow update: if isSignedIn() && hasRole(["Admin"]);
      allow delete: if isSignedIn() && hasRole(["Admin"]);
    }

    /**
     * @description Grants role based read and write access to invoice documents under a customer.
     * @path /customers/{customerId}/invoices/{invoiceId}
     * @allow (read): Authenticated user can read any invoice.
     * @allow (create): Authenticated user can create an invoice if they have the "Admin" role.
     * @allow (update): Authenticated user can update an invoice if they have the "Admin" role.
     * @allow (delete): Authenticated user can delete an invoice if they have the "Admin" role.
     * @deny (create): Authenticated user without the "Admin" role cannot create an invoice.
     * @deny (update): Authenticated user without the "Admin" role cannot update an invoice.
     * @deny (delete): Authenticated user without the "Admin" role cannot delete an invoice.
     * @principle Role-based access control for invoice management, scoped to a customer.
     */
    match /customers/{customerId}/invoices/{invoiceId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && hasRole(["Admin"]);
      allow update: if isSignedIn() && hasRole(["Admin"]);
      allow delete: if isSignedIn() && hasRole(["Admin"]);
    }

    /**
     * @description Grants owner-only access to user profile documents.
     * @path /users/{userId}
     * @allow (get): Authenticated user can get their own profile.
     * @allow (create): Authenticated user can create their own profile, if the user ID matches their auth UID.
     * @allow (update): Authenticated user can update their own profile.
     * @allow (delete): Authenticated user can delete their own profile.
     * @deny (get): Authenticated user cannot get another user's profile.
     * @deny (create): Authenticated user cannot create a profile for another user.
     * @deny (update): Authenticated user cannot update another user's profile.
     * @deny (delete): Authenticated user cannot delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource.data.email == request.auth.token.email;
      allow delete: if isOwner(userId);
    }

    /**
     * @description Grants read and write access to notification documents.
     * @path /notifications/{notificationId}
     * @allow (get): Authenticated user can get any notification.
     * @allow (create): Authenticated user can create a notification.
     * @allow (update): Authenticated user can update any notification.
     * @allow (delete): Authenticated user can delete any notification.
     * @principle Open access to notifications.
     */
    match /notifications/{notificationId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function hasRole(roles) {
    return isSignedIn() && request.auth.token.role in roles;
  }
}