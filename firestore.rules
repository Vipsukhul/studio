/**
 * @fileoverview Firestore Security Rules for the customer-invoice application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  All data is nested under
 * /customers/{customerId}/... and access is controlled based on the `customerId`
 * path parameter matching the authenticated user's UID.
 *
 * Data Structure:
 * - /customers/{customerId}: Stores customer profile information.
 * - /customers/{customerId}/invoices/{invoiceId}: Stores invoice details for a specific customer.
 * - /customers/{customerId}/invoices/{invoiceId}/outstandings/{outstandingId}: Stores outstanding amounts for an invoice.
 * - /customers/{customerId}/agePeriods/{agePeriodId}: Stores age period data for a customer.
 *
 * Key Security Decisions:
 * - Customers can only access their own data.
 * - Listing customers is disallowed.
 * - All write operations require a valid, authenticated user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the /customers/{customerId} collection. Only the customer can read/write their own data.
     * @path /customers/{customerId}
     * @allow (create) User abc can create their own customer profile if request.auth.uid == customerId.
     * @allow (get) User abc can read their own customer profile if request.auth.uid == customerId.
     * @allow (update) User abc can update their own customer profile if request.auth.uid == customerId.
     * @allow (delete) User abc can delete their own customer profile if request.auth.uid == customerId.
     * @deny (create) User def cannot create a customer profile for user abc.
     * @principle Enforces document ownership.
     */
    match /customers/{customerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(customerId);
      allow list: if false; // Listing customers is not allowed

      allow create: if isOwner(customerId) && request.resource.data.id == customerId;
      allow update: if isExistingOwner(customerId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(customerId);
    }

    /**
     * @description Secures the /customers/{customerId}/invoices/{invoiceId} collection. Only the customer can read/write their own invoices.
     * @path /customers/{customerId}/invoices/{invoiceId}
     * @allow (create) User abc can create invoices under their customer profile (customerId = abc).
     * @allow (get) User abc can read invoices under their customer profile (customerId = abc).
     * @allow (update) User abc can update invoices under their customer profile (customerId = abc).
     * @allow (delete) User abc can delete invoices under their customer profile (customerId = abc).
     * @deny (create) User def cannot create invoices under customer profile abc.
     * @principle Enforces document ownership.
     */
    match /customers/{customerId}/invoices/{invoiceId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(customerId);
      allow list: if isOwner(customerId);

      allow create: if isOwner(customerId) && request.resource.data.customerId == customerId;
      allow update: if isExistingOwner(customerId) && request.resource.data.customerId == resource.data.customerId;
      allow delete: if isExistingOwner(customerId);
    }

    /**
     * @description Secures the /customers/{customerId}/invoices/{invoiceId}/outstandings/{outstandingId} collection. Only the customer can read/write their own outstanding entries.
     * @path /customers/{customerId}/invoices/{invoiceId}/outstandings/{outstandingId}
     * @allow (create) User abc can create outstanding entries under their invoice (customerId = abc).
     * @allow (get) User abc can read outstanding entries under their invoice (customerId = abc).
     * @allow (update) User abc can update outstanding entries under their invoice (customerId = abc).
     * @allow (delete) User abc can delete outstanding entries under their invoice (customerId = abc).
     * @deny (create) User def cannot create outstanding entries under customer profile abc's invoices.
     * @principle Enforces document ownership.
     */
    match /customers/{customerId}/invoices/{invoiceId}/outstandings/{outstandingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(customerId);
      allow list: if isOwner(customerId);

      allow create: if isOwner(customerId) && request.resource.data.invoiceId == invoiceId;
      allow update: if isExistingOwner(customerId) && request.resource.data.invoiceId == resource.data.invoiceId;
      allow delete: if isExistingOwner(customerId);
    }

        /**
     * @description Secures the /customers/{customerId}/agePeriods/{agePeriodId} collection. Only the customer can read/write their own age periods.
     * @path /customers/{customerId}/agePeriods/{agePeriodId}
     * @allow (create) User abc can create age periods under their customer profile (customerId = abc).
     * @allow (get) User abc can read age periods under their customer profile (customerId = abc).
     * @allow (update) User abc can update age periods under their customer profile (customerId = abc).
     * @allow (delete) User abc can delete age periods under their customer profile (customerId = abc).
     * @deny (create) User def cannot create age periods under customer profile abc.
     * @principle Enforces document ownership.
     */
    match /customers/{customerId}/agePeriods/{agePeriodId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }


      allow get: if isOwner(customerId);
      allow list: if isOwner(customerId);

      allow create: if isOwner(customerId) && request.resource.data.customerId == customerId;
      allow update: if isExistingOwner(customerId) && request.resource.data.customerId == resource.data.customerId;
      allow delete: if isExistingOwner(customerId);
    }
  }
}