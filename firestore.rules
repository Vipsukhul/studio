/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a role-based access control model with owner-only restrictions for user profiles.
 *  Customers and Invoices can be viewed by anyone but can only be modified by those with the correct access permissions.
 *  Notifications can only be viewed by the intended recipient.
 * @data_structure
 *  - /customers/{customerId}: Stores customer data.
 *  - /customers/{customerId}/invoices/{invoiceId}: Stores invoice data for a specific customer.
 *  - /users/{userId}: Stores user profile information.
 *  - /notifications/{notificationId}: Stores application notifications.
 * @key_security_decisions
 *  - Users can only read or write their own profile data. Listing users is disallowed.
 *  - Customers and Invoices are publicly readable, but write operations must be secured based on roles.
 *  - Notifications can only be accessed by the user to whom they are addressed.
 * @denormalization_for_authorization None.
 * @structural_segregation None.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read access to all customers. Write access is restricted.
     * @path /customers/{customerId}
     * @allow (get, list): Any user can read customer data.
     * @deny (create, update, delete): No user can create, update, or delete customer data without proper roles.
     * @principle Public read, role-based writes.
     */
    match /customers/{customerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read access to all invoices. Write access is restricted.
     * @path /customers/{customerId}/invoices/{invoiceId}
     * @allow (get, list): Any user can read invoice data.
     * @deny (create, update, delete): No user can create, update, or delete invoice data without proper roles.
     * @principle Public read, role-based writes.
     */
    match /customers/{customerId}/invoices/{invoiceId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete): Only the user with the matching ID can access their own profile.
     * @deny (list): Listing all users is not allowed.
     * @principle Enforces document ownership.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read and create their own notifications.
     * @path /notifications/{notificationId}
     * @allow (get, create): Only the user with the matching ID (in 'to' field) can read or create their own notifications.
     * @deny (list, update, delete): Listing all notifications is not allowed. Notifications cannot be modified or deleted.
     * @principle Enforces document ownership and immutability.
     */
    match /notifications/{notificationId} {
        allow get: if request.auth.uid == resource.data.to;
        allow list: if false;
        allow create: if request.auth.uid == request.resource.data.to;
        allow update, delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}