/**
 * @fileoverview Firestore Security Rules for the Outstanding Tracker application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for customers, invoices, and outstandings.
 * Only authenticated users can access data, and they can only access data related to their customers.
 *
 * Data Structure:
 * The data is organized hierarchically under the `/customers/{customerId}` path,
 * with invoices stored in `/customers/{customerId}/invoices/{invoiceId}`
 * and outstandings in `/customers/{customerId}/invoices/{invoiceId}/outstandings/{outstandingId}`.
 *
 * Key Security Decisions:
 * - All data is private and requires authentication to access.
 * - Users can only manage data related to the customers they own.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to customer documents.
     * @path /customers/{customerId}
     * @allow (get, list) Authenticated user can access customer data.
     * @allow (create, update, delete) Authenticated user can create, update, and delete customer data where they are the owner.
     * @deny (get, list) Unauthorized user cannot access customer data.
     * @deny (create, update, delete) Unauthorized user cannot create, update, and delete customer data.
     * @principle Enforces document ownership for writes.
     */
    match /customers/{customerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(customerId) {
        return request.auth.uid == customerId;
      }

      function isExistingOwner(customerId) {
        return isOwner(customerId) && resource != null;
      }

      // Read Rules
      allow get: if isSignedIn();
      allow list: if isSignedIn();

      // Write Rules
      allow create: if isSignedIn() && isOwner(customerId);
      allow update: if isExistingOwner(customerId);
      allow delete: if isExistingOwner(customerId);
    }

    /**
     * @description Allows access to invoice documents.
     * @path /customers/{customerId}/invoices/{invoiceId}
     * @allow (get, list) Authenticated user can access invoice data for their customer.
     * @allow (create, update, delete) Authenticated user can create, update, and delete invoice data for their customer.
     * @deny (get, list) Unauthorized user cannot access invoice data.
     * @deny (create, update, delete) Unauthorized user cannot create, update, and delete invoice data.
     * @principle Enforces document ownership for writes.
     */
    match /customers/{customerId}/invoices/{invoiceId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(customerId) {
        return request.auth.uid == customerId;
      }

       function isExistingOwner(customerId) {
        return isOwner(customerId) && resource != null;
      }

      // Read Rules
      allow get: if isSignedIn() && isOwner(customerId);
      allow list: if isSignedIn() && isOwner(customerId);

      // Write Rules
      allow create: if isSignedIn() && isOwner(customerId);
      allow update: if isExistingOwner(customerId);
      allow delete: if isExistingOwner(customerId);
    }

    /**
     * @description Allows access to outstanding documents.
     * @path /customers/{customerId}/invoices/{invoiceId}/outstandings/{outstandingId}
     * @allow (get, list) Authenticated user can access outstanding data for their customer's invoice.
     * @allow (create, update, delete) Authenticated user can create, update, and delete outstanding data for their customer's invoice.
     * @deny (get, list) Unauthorized user cannot access outstanding data.
     * @deny (create, update, delete) Unauthorized user cannot create, update, and delete outstanding data.
     * @principle Enforces document ownership for writes.
     */
    match /customers/{customerId}/invoices/{invoiceId}/outstandings/{outstandingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(customerId) {
        return request.auth.uid == customerId;
      }

      function isExistingOwner(customerId) {
        return isOwner(customerId) && resource != null;
      }

      // Read Rules
      allow get: if isSignedIn() && isOwner(customerId);
      allow list: if isSignedIn() && isOwner(customerId);

      // Write Rules
      allow create: if isSignedIn() && isOwner(customerId);
      allow update: if isExistingOwner(customerId);
      allow delete: if isExistingOwner(customerId);
    }
  }
}