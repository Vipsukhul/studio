/**
 * @fileoverview Firestore Security Rules for the Outstanding Tracker application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict ownership model, ensuring that users can only
 * access data related to customers, invoices, and outstandings that they own.
 * Authorization independence is achieved through data denormalization, avoiding
 * costly `get()` operations in the security rules.
 *
 * Data Structure:
 * The Firestore database is structured hierarchically:
 * - /customers/{customerId}: Stores customer information.
 * - /customers/{customerId}/invoices/{invoiceId}: Stores invoice information
 *   related to a specific customer.  The 'region' field from the parent
 *   customer document is denormalized onto each invoice.
 * - /customers/{customerId}/invoices/{invoiceId}/outstandings/{outstandingId}:
 *   Stores outstanding amounts for specific invoices.
 *
 * Key Security Decisions:
 * - Users can only access customers, invoices, and outstandings that belong to
 *   them.
 * - Data consistency is enforced by validating the customerId in the path
 *   against the customerId in the document data during create operations.
 * - Update operations enforce immutability of the customerId to maintain
 *   relational integrity.
 * - Read operations are generally allowed for owners, but list operations
 *   require careful consideration to prevent unintended data exposure.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rules for the /customers collection.
     * @path /customers/{customerId}
     * @allow (create) - Allows a user to create a customer document where the customerId matches their UID.
     * @allow (get, list, update, delete) - Allows a user to read, update, or delete a customer document where the customerId matches their UID.
     * @deny (create) - Denies a user to create a customer document where the customerId does not match their UID.
     * @deny (get, list, update, delete) - Denies a user to read, update, or delete a customer document where the customerId does not match their UID.
     * @principle Enforces document ownership for all operations.
     */
    match /customers/{customerId} {
      // Function to check if the user is the owner of the document
      function isOwner(customerId) {
        return request.auth.uid == customerId;
      }

      // Function to check if the user is the owner and the resource exists (for update/delete)
      function isExistingOwner(customerId) {
        return isOwner(customerId) && resource != null;
      }

      // Allow read access to the customer document if the user is the owner
      allow get: if isOwner(customerId);
      // Allow listing if the user is the owner
      allow list: if isOwner(customerId);

      // Allow creation of a customer document if the user is the owner and the customerId in the document matches the path
      allow create: if isOwner(customerId) && request.resource.data.id == customerId;

      // Allow updates to a customer document if the user is the owner and the customerId in the document matches the path and is immutable
      allow update: if isExistingOwner(customerId) && request.resource.data.id == resource.data.id;

      // Allow deletion of a customer document if the user is the owner
      allow delete: if isExistingOwner(customerId);
    }

    /**
     * @description Rules for the /customers/{customerId}/invoices collection.
     * @path /customers/{customerId}/invoices/{invoiceId}
     * @allow (create) - Allows a user to create an invoice document where the customerId matches their UID.
     * @allow (get, list, update, delete) - Allows a user to read, update, or delete an invoice document where the customerId matches their UID.
     * @deny (create) - Denies a user to create an invoice document where the customerId does not match their UID.
     * @deny (get, list, update, delete) - Denies a user to read, update, or delete an invoice document where the customerId does not match their UID.
     * @principle Enforces document ownership for all operations.
     */
    match /customers/{customerId}/invoices/{invoiceId} {
      // Function to check if the user is the owner of the customer document
      function isOwner(customerId) {
        return request.auth.uid == customerId;
      }

      // Function to check if the user is the owner and the resource exists (for update/delete)
      function isExistingOwner(customerId) {
        return isOwner(customerId) && resource != null;
      }

      // Allow read access to the invoice document if the user is the owner
      allow get: if isOwner(customerId);
      // Allow listing if the user is the owner
      allow list: if isOwner(customerId);

      // Allow creation of an invoice document if the user is the owner and the customerId in the document matches the path
      allow create: if isOwner(customerId) && request.resource.data.customerId == customerId;

      // Allow updates to an invoice document if the user is the owner and the customerId in the document matches the path and is immutable
      allow update: if isExistingOwner(customerId) && request.resource.data.customerId == resource.data.customerId;

      // Allow deletion of an invoice document if the user is the owner
      allow delete: if isExistingOwner(customerId);
    }

    /**
     * @description Rules for the /customers/{customerId}/invoices/{invoiceId}/outstandings collection.
     * @path /customers/{customerId}/invoices/{invoiceId}/outstandings/{outstandingId}
     * @allow (create) - Allows a user to create an outstanding document where the customerId matches their UID.
     * @allow (get, list, update, delete) - Allows a user to read, update, or delete an outstanding document where the customerId matches their UID.
     * @deny (create) - Denies a user to create an outstanding document where the customerId does not match their UID.
     * @deny (get, list, update, delete) - Denies a user to read, update, or delete an outstanding document where the customerId does not match their UID.
     * @principle Enforces document ownership for all operations.
     */
    match /customers/{customerId}/invoices/{invoiceId}/outstandings/{outstandingId} {
      // Function to check if the user is the owner of the customer document
      function isOwner(customerId) {
        return request.auth.uid == customerId;
      }

      // Function to check if the user is the owner and the resource exists (for update/delete)
      function isExistingOwner(customerId) {
        return isOwner(customerId) && resource != null;
      }

      // Allow read access to the outstanding document if the user is the owner
      allow get: if isOwner(customerId);
      // Allow listing if the user is the owner
      allow list: if isOwner(customerId);

      // Allow creation of an outstanding document if the user is the owner and the customerId in the document matches the path
      allow create: if isOwner(customerId) && request.resource.data.invoiceId in get(/databases/$(database)/documents/customers/$(customerId)/invoices/$(invoiceId)).data.outstandingIds;

      // Allow updates to an outstanding document if the user is the owner and the customerId in the document matches the path and is immutable
      allow update: if isExistingOwner(customerId) && request.resource.data.invoiceId == resource.data.invoiceId;

      // Allow deletion of an outstanding document if the user is the owner
      allow delete: if isExistingOwner(customerId);
    }
  }
}