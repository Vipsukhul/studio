/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model, combined with data ownership, to protect user data and application resources.
 *
 * Data Structure:
 * - /customers/{customerId}: Stores customer data.
 * - /customers/{customerId}/invoices/{invoiceId}: Stores invoice data for a specific customer.
 * - /users/{userId}: Stores user profile information. Each user can only access their own profile.
 * - /notifications/{notificationId}: Stores application notifications.
 *
 * Key Security Decisions:
 * - Users can only read/write their own user document.
 * - Customer and invoice data are not protected beyond existence.
 * - Notifications are publicly readable but only created through backend.
 *
 * Denormalization for Authorization:
 * - None. The current rules do not require denormalization. Consider adding a role or department field to the customer document to simplify access control if needed in the future.
 *
 * Structural Segregation:
 * - No structural segregation is used. All data is stored in a single Firestore database. Consider segregating public and private data into separate collections in the future.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants read and write access to customer documents.
     * @path /customers/{customerId}
     * @allow (get, list): if true - Anyone can read customer data.
     * @allow (create, update, delete): if true - Anyone can modify customer data.
     * @deny N/A
     * @principle Public Read, Open Write. (Prototype Mode).
     */
    match /customers/{customerId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Grants read and write access to invoice documents under a specific customer.
     * @path /customers/{customerId}/invoices/{invoiceId}
     * @allow (get, list): if true - Anyone can read invoice data.
     * @allow (create, update, delete): if true - Anyone can modify invoice data.
     * @deny N/A
     * @principle Public Read, Open Write (Prototype Mode).
     */
    match /customers/{customerId}/invoices/{invoiceId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Manages access to user profile documents, allowing only the authenticated user to read and write their own profile.
     * @path /users/{userId}
     * @allow (get, list): if isOwner(userId) - Allows an authenticated user to read their own profile.
     * @allow (create): if isOwner(userId) - Allows an authenticated user to create their own profile.
     * @allow (update, delete): if isExistingOwner(userId) - Allows an authenticated user to update and delete their own profile, if it exists.
     * @deny (get, list): if !isSignedIn() - Denies unauthenticated access to user profiles.
     * @deny (create): if !isSignedIn() - Denies unauthenticated creation of user profiles.
     * @deny (update, delete): if !isSignedIn() - Denies unauthenticated updates and deletes of user profiles.
     * @deny (get, list): if !isOwner(userId) - Denies access to other user profiles.
     * @deny (create): if request.auth.uid != userId - prevents creating a user document with incorrect ID
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Grants read access to all notifications.
     * @path /notifications/{notificationId}
     * @allow (get, list): if true - Anyone can read any notification.
     * @allow (create, update, delete): if false - No one can create, update, or delete notifications.
     * @deny N/A
     * @principle Public Read, Owner-Only Write (Prototype Mode, write access is disabled)
     */
    match /notifications/{notificationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
  }
}