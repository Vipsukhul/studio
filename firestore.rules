rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId - The user ID to compare with the request's authentication UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an Admin.
     * @return {boolean} True if the user is an Admin, false otherwise.
     */
    function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    /**
     * @description Checks if the user is a Manager.
     * @return {boolean} True if the user is a Manager, false otherwise.
     */
    function isManager() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Manager';
    }

    /**
     * @description Checks if the user is a Manager or Admin.
     * @return {boolean} True if the user is a Manager or Admin, false otherwise.
     */
    function isManagerOrAdmin() {
        return isManager() || isAdmin();
    }

    /**
     * @description Checks if the user is an Engineer.
     * @return {boolean} True if the user is an Engineer, false otherwise.
     */
    function isEngineer() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Engineer';
    }

    /**
     * @description Checks if the user is a Country Manager.
     * @return {boolean} True if the user is a Country Manager, false otherwise.
     */
    function isCountryManager() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Country Manager';
    }

    /**
     * @description Checks if the document exists and the user is the owner.
     * @param {string} userId - The user ID to compare with the request's authentication UID.
     * @return {boolean} True if the document exists and the user is the owner, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(resource);
    }

    /**
     * @description Rules for the /customers/{customerId} collection.
     * @path /customers/{customerId}
     * @allow (create) If the user is a Manager or Admin.
     * @allow (get, list) If the user is signed in.
     * @deny (update, delete) If the user is not a Manager or Admin.
     * @principle Enforces role-based access control for customer data.
     */
    match /customers/{customerId} {
      allow get, list: if isSignedIn();
      allow create: if isManagerOrAdmin();
      allow update: if isManagerOrAdmin();
      allow delete: if isManagerOrAdmin();
    }

    /**
     * @description Rules for the /customers/{customerId}/invoices/{invoiceId} subcollection.
     * @path /customers/{customerId}/invoices/{invoiceId}
     * @allow (create) If the user is a Manager or Admin.
     * @allow (get, list) If the user is signed in.
     * @deny (update, delete) If the user is not a Manager or Admin.
     * @principle Enforces role-based access control for invoice data.
     */
    match /customers/{customerId}/invoices/{invoiceId} {
      allow get, list: if isSignedIn();
      allow create: if isManagerOrAdmin();
      allow update: if isManagerOrAdmin();
      allow delete: if isManagerOrAdmin();
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) If the user's ID matches the authenticated user's ID.
     * @allow (get) If the user's ID matches the authenticated user's ID or the user is an Admin.
     * @allow (update) If the user's ID matches the authenticated user's ID or the user is an Admin, and the document exists.
     * @deny (delete) If the user is not an Admin or the user's ID doesn't match the authenticated user's ID.
     * @deny (list) Listing users is not allowed.
     * @principle Enforces user-ownership for profile data, admins can read all.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if (isOwner(userId) || isAdmin());
      allow delete: if isAdmin();
    }

      /**
       * @description Rules for the /notifications/{notificationId} collection.
       * @path /notifications/{notificationId}
       * @allow (create) If the user is an Admin.
       * @allow (get, list) If the user is an Admin.
       * @deny (update, delete) If the user is not an Admin.
       * @principle Enforces role-based access control for notification data.
       */
      match /notifications/{notificationId} {
        allow get, list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
      }
  }
}