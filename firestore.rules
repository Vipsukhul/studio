/**
 * @fileoverview Firestore Security Rules for Outstanding Tracker App
 *
 * Core Philosophy:
 * This ruleset enforces a strict path-based ownership model where each customer, invoice, and outstanding amount is only accessible to authorized users.
 *
 * Data Structure:
 * The data is organized hierarchically: /customers/{customerId}/invoices/{invoiceId}/outstandings/{outstandingId}.
 *
 * Key Security Decisions:
 * - Data access is restricted based on the path.
 * - The rules do not allow listing of root level documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to customer documents.
     * @path /customers/{customerId}
     * @allow (create) If the authenticated user ID matches the `customerId`.
     * @deny (create) If the authenticated user ID does not match the `customerId`.
     * @allow (get) If the authenticated user ID matches the `customerId`.
     * @deny (get) If the authenticated user ID does not match the `customerId`.
     * @allow (update) If the authenticated user ID matches the `customerId`.
     * @deny (update) If the authenticated user ID does not match the `customerId`.
     * @allow (delete) If the authenticated user ID matches the `customerId`.
     * @deny (delete) If the authenticated user ID does not match the `customerId`.
     * @allow (list) If the authenticated user ID matches the `customerId`.
     * @deny (list) If the authenticated user ID does not match the `customerId`.
     * @principle Enforces document ownership based on the customerId path parameter.
     */
    match /customers/{customerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(customerId) {
        return request.auth.uid == customerId;
      }

      function isExistingOwner(customerId) {
        return isSignedIn() && resource.data.id == customerId && request.auth.uid == customerId;
      }

      allow get: if isOwner(customerId);
      allow list: if false;

      allow create: if isSignedIn() && request.auth.uid == customerId;
      allow update: if isExistingOwner(customerId);
      allow delete: if isExistingOwner(customerId);
    }

    /**
     * @description Controls access to invoice documents nested under a customer.
     * @path /customers/{customerId}/invoices/{invoiceId}
     * @allow (create) If the authenticated user ID matches the `customerId`.
     * @deny (create) If the authenticated user ID does not match the `customerId`.
     * @allow (get) If the authenticated user ID matches the `customerId`.
     * @deny (get) If the authenticated user ID does not match the `customerId`.
     * @allow (update) If the authenticated user ID matches the `customerId`.
     * @deny (update) If the authenticated user ID does not match the `customerId`.
     * @allow (delete) If the authenticated user ID matches the `customerId`.
     * @deny (delete) If the authenticated user ID does not match the `customerId`.
     * @allow (list) If the authenticated user ID matches the `customerId`.
     * @deny (list) If the authenticated user ID does not match the `customerId`.
     * @principle Enforces document ownership based on the customerId path parameter.
     */
    match /customers/{customerId}/invoices/{invoiceId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(customerId) {
        return request.auth.uid == customerId;
      }

      function isExistingOwner(customerId) {
        return isSignedIn() && resource.data.customerId == customerId && request.auth.uid == customerId;
      }

      allow get: if isOwner(customerId);
      allow list: if isOwner(customerId);
      allow create: if isSignedIn() && isOwner(customerId);
      allow update: if isExistingOwner(customerId);
      allow delete: if isExistingOwner(customerId);
    }

    /**
     * @description Controls access to outstanding documents nested under an invoice.
     * @path /customers/{customerId}/invoices/{invoiceId}/outstandings/{outstandingId}
     * @allow (create) If the authenticated user ID matches the `customerId`.
     * @deny (create) If the authenticated user ID does not match the `customerId`.
     * @allow (get) If the authenticated user ID matches the `customerId`.
     * @deny (get) If the authenticated user ID does not match the `customerId`.
     * @allow (update) If the authenticated user ID matches the `customerId`.
     * @deny (update) If the authenticated user ID does not match the `customerId`.
     * @allow (delete) If the authenticated user ID matches the `customerId`.
     * @deny (delete) If the authenticated user ID does not match the `customerId`.
     * @allow (list) If the authenticated user ID matches the `customerId`.
     * @deny (list) If the authenticated user ID does not match the `customerId`.
     * @principle Enforces document ownership based on the customerId path parameter.
     */
    match /customers/{customerId}/invoices/{invoiceId}/outstandings/{outstandingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(customerId) {
        return request.auth.uid == customerId;
      }

      function isExistingOwner(customerId) {
        return isSignedIn() && resource.data.invoiceId == invoiceId && request.auth.uid == customerId;
      }

      allow get: if isOwner(customerId);
      allow list: if isOwner(customerId);
      allow create: if isSignedIn() && isOwner(customerId);
      allow update: if isExistingOwner(customerId);
      allow delete: if isExistingOwner(customerId);
    }
  }
}