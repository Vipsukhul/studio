/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model,
 *              where users can only access data according to their assigned role.
 *
 * Data Structure:
 * - /customers/{customerId}: Stores customer data. Accessible only to users with specific roles.
 * - /customers/{customerId}/invoices/{invoiceId}: Stores invoice data for a specific customer. Access restricted based on user roles.
 * - /users/{userId}: Stores user profile information. Only the user themselves or admins can access this data.
 * - /notifications/{notificationId}: Stores application notifications. Only the user themselves can access this data.
 *
 * Key Security Decisions:
 * - Listing of users is disallowed.
 * - Users can only create their own user document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to check against.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is signed in and is the existing owner of the resource.
     * @param {string} userId The user ID to check against.
     */
    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the 'Admin' role.
     */
    function isAdmin() {
        return request.auth.token.role == 'Admin';
    }

    /**
     * @description Checks if the user has the 'Country Manager' role.
     */
    function isCountryManager() {
        return request.auth.token.role == 'Country Manager';
    }

    /**
     * @description Checks if the user has the 'Engineer' role.
     */
    function isEngineer() {
        return request.auth.token.role == 'Engineer';
    }

    /**
     * @description Checks if the user has the 'Manager' role.
     */
    function isManager() {
        return request.auth.token.role == 'Manager';
    }

    /**
     * @description Checks if the user is authorized to read customer data.
     */
    function canReadCustomer() {
        return isSignedIn() && (isAdmin() || isCountryManager() || isManager() || isEngineer());
    }

    /**
     * @description Checks if the user is authorized to write customer data.
     */
    function canWriteCustomer() {
        return isSignedIn() && (isAdmin() || isCountryManager() || isManager());
    }

    /**
     * @description
     * @path /customers/{customerId}
     * @allow (read) User with role Admin, Country Manager, Manager or Engineer can read customer data.
     * @deny (read) User without role Admin, Country Manager, Manager or Engineer cannot read customer data.
     * @allow (create) User with role Admin, Country Manager or Manager can create customer data.
     * @deny (create) User without role Admin, Country Manager or Manager cannot create customer data.
     * @allow (update) User with role Admin, Country Manager or Manager can update customer data.
     * @deny (update) User without role Admin, Country Manager or Manager cannot update customer data.
     * @allow (delete) User with role Admin, Country Manager or Manager can delete customer data.
     * @deny (delete) User without role Admin, Country Manager or Manager cannot delete customer data.
     * @principle Role-based access control.
     */
    match /customers/{customerId} {
      allow get: if canReadCustomer();
      allow list: if canReadCustomer();
      allow create: if canWriteCustomer();
      allow update: if canWriteCustomer() && resource != null;
      allow delete: if canWriteCustomer() && resource != null;
    }

    /**
     * @description
     * @path /customers/{customerId}/invoices/{invoiceId}
     * @allow (read) User with role Admin, Country Manager, Manager or Engineer can read invoice data.
     * @deny (read) User without role Admin, Country Manager, Manager or Engineer cannot read invoice data.
     * @allow (create) User with role Admin, Country Manager or Manager can create invoice data.
     * @deny (create) User without role Admin, Country Manager or Manager cannot create invoice data.
     * @allow (update) User with role Admin, Country Manager or Manager can update invoice data.
     * @deny (update) User without role Admin, Country Manager or Manager cannot update invoice data.
     * @allow (delete) User with role Admin, Country Manager or Manager can delete invoice data.
     * @deny (delete) User without role Admin, Country Manager or Manager cannot delete invoice data.
     * @principle Role-based access control.
     */
    match /customers/{customerId}/invoices/{invoiceId} {
      allow get: if canReadCustomer();
      allow list: if canReadCustomer();
      allow create: if canWriteCustomer();
      allow update: if canWriteCustomer() && resource != null;
      allow delete: if canWriteCustomer() && resource != null;
    }

    /**
     * @description
     * @path /users/{userId}
     * @allow (read) User can read their own user document or admin can read any user document.
     * @deny (read) User cannot read other user documents.
     * @allow (create) User can create their own user document.
     * @deny (create) User cannot create other user documents.
     * @allow (update) User can update their own user document or admin can update any user document.
     * @deny (update) User cannot update other user documents.
     * @allow (delete) User can delete their own user document or admin can delete any user document.
     * @deny (delete) User cannot delete other user documents.
     * @principle Owner-only access for user documents.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description
     * @path /notifications/{notificationId}
     * @allow (read) User can read their own notifications.
     * @deny (read) User cannot read other user notifications.
     * @allow (create) Any signed in user can create notifications.
     * @deny (create) User cannot create other user notifications.
     * @allow (update) User can update their own notifications.
     * @deny (update) User cannot update other user notifications.
     * @allow (delete) User can delete their own notifications.
     * @deny (delete) User cannot delete other user notifications.
     * @principle Owner-only access for notifications.
     */
    match /notifications/{notificationId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}