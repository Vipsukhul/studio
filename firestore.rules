/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model for users and ownership for customer data and their associated invoices.
 * User profiles are private and only accessible to the user themselves. Notifications are addressed to a specific user.
 *
 * Data Structure:
 * - /customers/{customerId}: Stores customer information.
 * - /customers/{customerId}/invoices/{invoiceId}: Stores invoice information for each customer.
 * - /users/{userId}: Stores user profile information.
 * - /notifications/{notificationId}: Stores notifications for users.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user profiles.
 * - Customers data is accessible to all signed-in users.
 * - Invoices are accessible to all signed-in users.
 * - Notifications are only readable and writable by the user they are addressed to.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of an existing resource.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Allows any signed-in user to read any customer data. Enforces ownership for write operations.
     * @path /customers/{customerId}
     * @allow (get, list): If any user is signed in.
     * @allow (create): If the user is signed in.
     * @allow (update, delete): If the user is signed in.
     * @deny (create): If the request does not have an authenticated user.
     * @deny (update, delete): If the request does not have an authenticated user.
     * @principle Grants public read access while restricting writes to signed-in users.
     */
    match /customers/{customerId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows any signed-in user to read any invoice data. Enforces ownership for write operations.
     * @path /customers/{customerId}/invoices/{invoiceId}
     * @allow (get, list): If any user is signed in.
     * @allow (create): If the user is signed in.
     * @allow (update, delete): If the user is signed in.
     * @deny (create): If the request does not have an authenticated user.
     * @deny (update, delete): If the request does not have an authenticated user.
     * @principle Grants public read access while restricting writes to signed-in users.
     */
    match /customers/{customerId}/invoices/{invoiceId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to user profiles. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (get): If the user is the owner of the profile.
     * @allow (list): If false
     * @allow (create): If the user ID in the path matches the authenticated user's ID.
     * @allow (update, delete): If the user is the owner of the profile and the document exists.
     * @deny (create): If the user ID in the path does not match the authenticated user's ID.
     * @deny (update, delete): If the user is not the owner of the profile.
     * @principle Enforces strict user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to notifications. Only the user the notification is addressed to can read and write.
     * @path /notifications/{notificationId}
     * @allow (get): If the notification is addressed to the requesting user.
     * @allow (list): If false
     * @allow (create): If the notification is addressed to the requesting user.
     * @allow (update, delete): If the notification is addressed to the requesting user.
     * @deny (create): If the notification is not addressed to the requesting user.
     * @deny (update, delete): If the notification is not addressed to the requesting user.
     * @principle Enforces strict user-ownership for notification data.
     */
    match /notifications/{notificationId} {
      allow get: if request.auth.uid == resource.data.to;
      allow list: if false;
      allow create: if request.auth.uid == request.resource.data.to;
      allow update: if request.auth.uid == resource.data.to && resource != null;
      allow delete: if request.auth.uid == resource.data.to && resource != null;
    }
  }
}